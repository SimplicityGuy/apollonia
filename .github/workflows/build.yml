---
name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 1 * * 6'  # Weekly build on Saturday at 1 AM UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/apollonia

jobs:
  # Quality checks (fast feedback)
  quality:
    name: Quality Checks
    uses: ./.github/workflows/quality.yml

  # Comprehensive testing
  tests:
    name: Test Suite
    uses: ./.github/workflows/test.yml
    needs: quality

  # Docker builds and deployment
  docker:
    name: Docker Build & Deploy
    uses: ./.github/workflows/docker.yml
    needs: tests
    secrets: inherit
    with:
      push_images: ${{ github.event_name != 'pull_request' }}

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality

    permissions:
      contents: read
      security-events: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v2

      - name: 🐍 Set up Python
        run: uv python install 3.12

      - name: 📦 Install dependencies
        run: uv sync --frozen --all-extras

      - name: 🔒 Run pip-audit security scan
        run: |
          uv run pip-audit --format=json --output=pip-audit-report.json --progress-spinner=off || true

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript
          queries: security-and-quality

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

      - name: 📤 Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            pip-audit-report.json

  # Dependency updates check
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          warn-only: false

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v2

      - name: 🐍 Set up Python
        run: uv python install 3.12

      - name: 📦 Install dependencies
        run: uv sync --frozen --all-extras

      - name: ⚡ Run performance benchmarks
        run: |
          if [ -d "benchmarks" ]; then
            uv run pytest benchmarks/ --benchmark-json=benchmark-results.json
          else
            echo "ℹ️ No benchmark directory found, skipping performance tests"
          fi

      - name: 📊 Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        if: hashFiles('benchmark-results.json') != ''
        with:
          tool: 'pytest'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          summary-always: true

  # Generate overall status
  status:
    name: CI/CD Status
    runs-on: ubuntu-latest
    needs: [quality, tests, docker, security]
    if: always()

    steps:
      - name: 📊 Generate overall status
        run: |
          echo "## 🚀 CI/CD Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Suite | ${{ needs.tests.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Set overall status
          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.tests.result }}" == "success" && \
                "${{ needs.docker.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" ]]; then
            echo "🎉 **Overall Status: ✅ SUCCESS**" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "⚠️ **Overall Status: ❌ FAILURE**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
