---
name: Docker Build & Deploy

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.actor }}/apollonia

jobs:
  # Discover services to build
  discover-services:
    name: Discover Services
    runs-on: ubuntu-latest
    timeout-minutes: 5

    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
      frontend: ${{ steps.check-frontend.outputs.exists }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔍 Discover services with Dockerfiles
        id: set-matrix
        run: |
          services=$(find . -name Dockerfile -type f -exec dirname {} \; | \
            sed 's|^\./||' | \
            grep -v '^\.' | \
            grep -v frontend | \
            sort -u | \
            jq -R -s -c 'split("\n")[:-1]')
          echo "services=$services" >> $GITHUB_OUTPUT
          echo "📦 Found services: $services"

      - name: 🎨 Check for frontend
        id: check-frontend
        run: |
          if [ -f "frontend/Dockerfile" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "🎨 Frontend Dockerfile found"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No frontend Dockerfile found"
          fi

  # Build and test backend services
  build-services:
    name: Build Service (${{ matrix.service }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: discover-services
    if: fromJson(needs.discover-services.outputs.services)[0] != null

    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.discover-services.outputs.services) }}

    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔒 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '${{ matrix.service }}'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

      - name: 🔐 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Apollonia ${{ matrix.service }}
            org.opencontainers.image.description=Apollonia media catalog ${{ matrix.service }} service
            org.opencontainers.image.vendor=Apollonia Project

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v6
        timeout-minutes: 25
        with:
          context: .
          file: ${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: 🔍 Test Docker image
        run: |
          echo "🧪 Testing ${{ matrix.service }} image..."
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }} --version || \
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}:${{ github.sha }} --help || \
          echo "ℹ️ Image built successfully (no version/help command available)"

  # Build frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: discover-services
    if: needs.discover-services.outputs.frontend == 'true'

    permissions:
      contents: read
      packages: write

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup frontend environment
        uses: ./.github/actions/setup-frontend-env
        with:
          node-version: '22'
          install-just: 'true'

      - name: 🏗️ Build frontend
        timeout-minutes: 10
        run: just build-frontend-ci

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: 🔐 Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=Apollonia Frontend
            org.opencontainers.image.description=Apollonia media catalog frontend application
            org.opencontainers.image.vendor=Apollonia Project

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔨 Build and push frontend image
        uses: docker/build-push-action@v6
        timeout-minutes: 15
        with:
          context: frontend
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

  # Multi-service integration test
  integration-test:
    name: Integration Test (Docker)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build-services, build-frontend]
    if: always() && (needs.build-services.result == 'success' || needs.build-frontend.result == 'success')

    permissions:
      contents: read
      packages: read

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐋 Install docker-compose
        uses: alexellis/arkade-get@1eef818e467c387d3f50cfe0d2c565d1cbe82b03 # master
        with:
          docker-compose: latest

      - name: 🐳 Test multi-service deployment
        timeout-minutes: 10
        run: |
          echo "🚀 Starting integrated services test..."

          # Create a test docker-compose file with the newly built images
          cat > docker-compose.test.yml << EOF
          version: '3.8'
          services:
            rabbitmq:
              image: rabbitmq:3-management-alpine
              environment:
                RABBITMQ_DEFAULT_USER: test
                RABBITMQ_DEFAULT_PASS: test
              healthcheck:
                test: rabbitmq-diagnostics ping
                interval: 10s
                timeout: 5s
                retries: 5

            postgres:
              image: postgres:15-alpine
              environment:
                POSTGRES_USER: test
                POSTGRES_PASSWORD: test
                POSTGRES_DB: apollonia_test
              healthcheck:
                test: pg_isready -U test
                interval: 10s
                timeout: 5s
                retries: 5
          EOF

          # Start infrastructure services
          docker-compose -f docker-compose.test.yml up -d

          # Wait for services to be ready
          echo "⏳ Waiting for services to be ready..."
          sleep 30

          # Test service connectivity
          docker-compose -f docker-compose.test.yml ps

          echo "✅ Integration test completed"

      - name: 🛑 Cleanup
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v || true

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-services, build-frontend, integration-test]
    if: always()

    steps:
      - name: 📊 Generate deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Registry |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Services | ${{ needs.build-services.result == 'success' && '✅ Built' || '❌ Failed' }} | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.build-frontend.result == 'success' && '✅ Built' || '❌ Failed' }} | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Test | ${{ needs.integration-test.result == 'success' && '✅ Passed' || '❌ Failed' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "🔗 **Image URLs:**" >> $GITHUB_STEP_SUMMARY
            echo "- Services: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/<service>:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Frontend: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          fi

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-services, build-frontend, integration-test]
    if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: 📢 Send Discord notification
        uses: sarisia/actions-status-discord@v1.15.3
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Apollonia Docker Build"
          description: |
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            **Services:** ${{ needs.build-services.result }}
            **Frontend:** ${{ needs.build-frontend.result }}
            **Integration:** ${{ needs.integration-test.result }}
          color: ${{ needs.build-services.result == 'success' && needs.build-frontend.result == 'success' && needs.integration-test.result == 'success' && 0x00ff00 || 0xff0000 }}
