version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: apollonia-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: apollonia
      RABBITMQ_DEFAULT_PASS: apollonia
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5-community
    container_name: apollonia-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/apollonia
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  ingestor:
    build:
      context: ./ingestor
      dockerfile: Dockerfile
    container_name: apollonia-ingestor
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      AMQP_CONNECTION_STRING: amqp://apollonia:apollonia@rabbitmq:5672/
      DATA_DIRECTORY: /data
    volumes:
      - ./data:/data
    restart: unless-stopped

  populator:
    build:
      context: ./populator
      dockerfile: Dockerfile
    container_name: apollonia-populator
    depends_on:
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      AMQP_CONNECTION_STRING: amqp://apollonia:apollonia@rabbitmq:5672/
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: apollonia
    restart: unless-stopped

volumes:
  rabbitmq_data:
  neo4j_data:
  neo4j_logs:
