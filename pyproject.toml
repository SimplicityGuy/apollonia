[project]
name = "apollonia"
version = "0.1.0"
description = "File monitoring and processing system with AMQP message queuing"
authors = [
    { name = "Robert Wlodarczyk", email = "robert@simplicityguy.com" }
]
readme = "README.md"
# Primary target is Python 3.13, but CI tests on 3.12 for compatibility
requires-python = ">=3.13"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]

# Runtime dependencies for all services
dependencies = [
    # Import core dependencies needed for testing the services
    "asyncinotify>=4.2.1",
    "orjson>=3.9.0",
    "pika>=1.3.0",
    "xxhash>=3.5.0",
    "aio-pika>=9.4.0",
    "neo4j>=5.19.0",
]

[project.urls]
Homepage = "https://github.com/SimplicityGuy/apollonia"
Repository = "https://github.com/SimplicityGuy/apollonia"
Issues = "https://github.com/SimplicityGuy/apollonia/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-watch>=4.2.0",
    "ruff>=0.5.0",
    "mypy>=1.10.0",
    "taskipy>=1.12.0",
    "pre-commit>=3.7.0",
    "types-pyyaml>=6.0.0",
]

# Testing dependencies (for CI)
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
]

# Integration testing
integration = [
    "docker>=7.0.0",
    "neo4j>=5.19.0",
    "aio-pika>=9.4.0",
    "pika>=1.3.0",
]

# All dependencies combined
all = [
    "apollonia[dev,test,integration]",
]

[tool.uv]
# uv-specific configuration
dev-dependencies = [
    # Include all development dependencies
    "apollonia[dev]",
]

[tool.hatch.build.targets.wheel]
packages = ["ingestor", "populator"]

[tool.taskipy.tasks]
# Development setup tasks
setup = "uv sync --all-extras"
dev = "uv sync --extra dev && uv run pre-commit install"

# Code quality tasks
format = "uv run ruff format ."
lint = "uv run ruff check . --fix"
typecheck = "uv run mypy ."

# Testing tasks
test = "uv run pytest -v --cov=ingestor --cov=populator --cov-report=term-missing"
test-watch = "uv run pytest-watch -v"
test-integration = "uv run pytest -v -m integration"
test-e2e = "uv run pytest -v -m e2e"

# Comprehensive quality checks
check = "uv run task lint && uv run task typecheck && uv run task test"
check-all = "uv run pre-commit run --all-files && uv run task check"

# Service tasks
ingestor = "uv run python -m ingestor.ingestor"
populator = "uv run python -m populator.populator"

# Build tasks
build = "uv build"
build-docker = "docker compose build"
build-services = "cd ingestor && uv build && cd ../populator && uv build"

# Cleanup tasks
clean = "rm -rf dist/ build/ *.egg-info .coverage .pytest_cache .mypy_cache .ruff_cache"
clean-all = "uv run task clean && docker system prune -f"

# Pre-commit tasks
install-hooks = "uv run pre-commit install"
update-hooks = "uv run pre-commit autoupdate"

# Development workflow
install = "uv sync --all-extras && uv run task install-hooks"
ci = "uv run task check-all"

[tool.ruff]
target-version = "py313"
line-length = 100
indent-width = 4

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "COM",    # flake8-commas
    "PTH",    # flake8-use-pathlib
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "RUF",    # Ruff-specific rules
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
]
ignore = [
    "COM812",  # missing-trailing-comma (conflicts with formatter)
    "ISC001",  # single-line-implicit-string-concatenation (conflicts with formatter)
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow assert in tests
"tests/e2e/*" = ["S101", "S603", "S607"]  # Allow subprocess in E2E tests

[tool.ruff.lint.isort]
known-first-party = ["ingestor", "populator"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
show_error_codes = true
show_error_context = true
show_column_numbers = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (deselect with '-m not integration')",
    "e2e: marks tests as end-to-end tests (deselect with '-m not e2e')",
]

[tool.coverage.run]
source = ["ingestor", "populator"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
