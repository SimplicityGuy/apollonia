[project]
name = "apollonia"
version = "0.1.0"
description = "File monitoring and processing system with AMQP message queuing"
authors = [
    { name = "Robert Wlodarczyk", email = "robert@simplicityguy.com" }
]
readme = "README.md"
requires-python = "~=3.12.0"
license = { text = "MIT" }
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "aio-pika>=9.4.0",
    "alembic>=1.13.0",
    "asyncpg>=0.29.0",
    "essentia-tensorflow>=2.1b6.dev1110",
    "fastapi>=0.109.0",
    "greenlet>=3.0.0",
    "librosa>=0.10.0",
    "moviepy>=1.0.3",
    "neo4j>=5.19.0",
    "numpy>=1.26.0",
    "orjson>=3.9.0",
    "passlib[bcrypt]>=1.7.4",
    "pika>=1.3.0",
    "prometheus-client>=0.19.0",
    "pydantic-settings>=2.1.0",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "strawberry-graphql[fastapi]>=0.217.0",
    "tensorflow>=2.15.0",
    "uvicorn[standard]>=0.27.0",
    "watchdog>=6.0.0",
    "xxhash>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/SimplicityGuy/apollonia"
Repository = "https://github.com/SimplicityGuy/apollonia"
Issues = "https://github.com/SimplicityGuy/apollonia/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.optional-dependencies]
dev = [
    "bandit[toml]>=1.7.0",
    "httpx>=0.27.0",
    "mypy>=1.10.0",
    "pip-audit>=2.7.0",
    "pre-commit>=3.7.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-watch>=4.2.0",
    "pytest-xdist>=3.5.0",
    "ruff>=0.5.0",
    "taskipy>=1.12.0",
    "types-pyyaml>=6.0.0",
]

test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-benchmark>=4.0.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.5.0",
]

integration = [
    "aio-pika>=9.4.0",
    "docker>=7.0.0",
    "httpx>=0.27.0",
    "neo4j>=5.19.0",
    "pika>=1.3.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
]


all = [
    "apollonia[dev,test,integration]",
]

[tool.uv]
dev-dependencies = [
    "aiohttp>=3.12.14",
    "apollonia[dev]",
]

[tool.hatch.build.targets.wheel]
packages = ["apollonia", "ingestor", "populator", "analyzer", "api"]

[tool.taskipy.tasks]
analyzer = "uv run python -m analyzer.analyzer"
build = "uv build"
build-docker = "docker compose build"
build-services = "cd ingestor && uv build && cd ../populator && uv build"
check = "uv run task lint && uv run task typecheck && uv run task test"
check-all = "uv run pre-commit run --all-files && uv run task check"
ci = "uv run task check-all"
clean = "rm -rf dist/ build/ *.egg-info .coverage .pytest_cache .mypy_cache .ruff_cache"
clean-all = "uv run task clean && docker system prune -f"
db-downgrade = "alembic downgrade -1"
db-migrate = "alembic upgrade head"
db-revision = "alembic revision --autogenerate"
db-up = "docker compose up -d postgres redis"
dev = "uv sync --extra dev && uv run pre-commit install"
format = "uv run ruff format ."
ingestor = "uv run python -m ingestor.ingestor"
install = "uv sync --all-extras && uv run task install-hooks"
install-hooks = "uv run pre-commit install"
lint = "uv run ruff check . --fix"
media-ingestor = "uv run python -m ingestor.media_ingestor"
populator = "uv run python -m populator.populator"
setup = "uv sync --all-extras"
test = "uv run pytest -v --cov=apollonia --cov=ingestor --cov=populator --cov=analyzer --cov=api --cov-report=term-missing"
test-e2e = "uv run pytest -v -m e2e"
test-integration = "uv run pytest -v -m integration"
test-watch = "uv run pytest-watch -v"
typecheck = "uv run mypy ."
update-hooks = "uv run pre-commit autoupdate"

[tool.ruff]
target-version = "py312"
line-length = 100
indent-width = 4

select = [
    "ARG",
    "ASYNC",
    "B",
    "C4",
    "COM",
    "E",
    "F",
    "I",
    "PTH",
    "RUF",
    "S",
    "SIM",
    "TCH",
    "TID",
    "UP",
    "W",
]
ignore = [
    "COM812",
    "ISC001",
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"benchmarks/*" = ["ARG001", "ARG002", "PTH123", "S101", "SIM115"]
"tests/*" = ["S101"]
"tests/e2e/*" = ["S101", "S603", "S607"]

[tool.ruff.lint.isort]
known-first-party = ["ingestor", "populator"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true
pretty = true
allow_untyped_calls = true
show_error_codes = true
show_error_context = true
show_column_numbers = true
mypy_path = "stubs"

[[tool.mypy.overrides]]
module = "aiofiles"
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "-v",
    "--showlocals",
    "--strict-markers",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--durations=10",
]
testpaths = ["tests", "frontend/src"]
pythonpath = ["."]
asyncio_mode = "auto"
norecursedirs = [".git", ".tox", "dist", "build", "*.egg", "node_modules", "__pycache__", ".pytest_cache", ".venv", "venv"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
timeout = 300
timeout_method = "thread"
console_output_style = "progress"
doctest_optionflags = "NORMALIZE_WHITESPACE ELLIPSIS"
filterwarnings = [
    "ignore::DeprecationWarning:aio_pika.*",
    "ignore::DeprecationWarning:neo4j.*",
    "error::UserWarning",
    "error::FutureWarning",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m not integration')",
    "e2e: marks tests as end-to-end tests (deselect with '-m not e2e')",
    "playwright: marks tests as requiring Playwright for browser automation (deselect with '-m not playwright')",
    "slow: marks tests as slow running (deselect with '-m not slow')",
    "docker: marks tests as requiring Docker (deselect with '-m not docker')",
]

[tool.coverage.run]
source = ["apollonia", "ingestor", "populator", "analyzer", "api"]
omit = ["*/tests/*", "*/test_*.py", "*/__pycache__/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = [".venv", "build", "dist", "tests", "venv"]
skips = ["B101"]

[dependency-groups]
dev = [
    "freezegun>=1.5.3",
    "playwright>=1.54.0",
    "types-requests>=2.32.4.20250611",
]
